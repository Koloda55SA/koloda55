import logging
import os
import platform
import asyncio
import html
from collections import deque
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from openai import AsyncOpenAI, APIError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
if platform.system() == "Windows":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class Config:
    # Telegram
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    ADMIN_ID = int(os.getenv('TELEGRAM_ADMIN_ID'))
    DONATE_LINK = os.getenv('DONATE_LINK', 'https://example.com/donate')
    PROJECT_INFO = os.getenv('PROJECT_INFO', 'üåü <b>–ù–∞—à –ø—Ä–æ–µ–∫—Ç</b>\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ —Å –ò–ò')

    # –°–ø–∏—Å–æ–∫ API –∫–ª—é—á–µ–π
    API_KEYS = [key for key in [
        os.getenv('API_KEY1'),
        os.getenv('API_KEY2'),
        os.getenv('API_KEY3')
    ] if key]  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏
    BASE_URL = os.getenv('BASE_URL', 'https://api.langdock.com/openai/eu/v1')
    MODEL = os.getenv('MODEL', 'gpt-4o-mini')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not Config.API_KEYS:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_dialogs = {}
code_storage = {}
current_api_key_index = 0
api_clients = [AsyncOpenAI(api_key=key, base_url=Config.BASE_URL) for key in Config.API_KEYS]


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if not Config.CHANNEL_ID:
            return True

        member = await bot.get_chat_member(chat_id=Config.CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    builder.button(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    builder.button(text="üì¢ –†–µ–∫–ª–∞–º–∞")
    builder.button(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)


def get_cancel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    builder = ReplyKeyboardBuilder()
    builder.button(text="üö´ –û—Ç–º–µ–Ω–∞")
    return builder.as_markup(resize_keyboard=True)


def update_dialog_history(user_id: int, role: str, content: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_dialogs:
        user_dialogs[user_id] = deque(maxlen=10)
    user_dialogs[user_id].append({"role": role, "content": content})


def format_code(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —Å HTML-—Ç–µ–≥–∞–º–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏"""
    if not text or "```" not in text:
        return text or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"

    try:
        parts = text.split("```")
        result = []

        for i, part in enumerate(parts):
            if i % 2 == 1:
                # –ë–ª–æ–∫ –∫–æ–¥–∞
                lines = part.split('\n')
                language = lines[0] if lines else ''
                code = '\n'.join(lines[1:]) if len(lines) > 1 else part
                result.append(f'<pre><code class="language-{language}">{html.escape(code)}</code></pre>')
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                result.append(part)

        return ''.join(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return text


def create_copy_button(code_text: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞"""
    if not code_text:
        return None

    code_id = abs(hash(code_text))
    code_storage[code_id] = code_text
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_{code_id}")
    return builder.as_markup()


async def rotate_api_key():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á"""
    global current_api_key_index
    current_api_key_index = (current_api_key_index + 1) % len(api_clients)
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ API –∫–ª—é—á #{current_api_key_index + 1}")


async def get_ai_response(messages: list) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–π"""
    if not messages:
        return "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"

    max_retries = len(api_clients) * 2  # –î–≤–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª—é—á
    last_error = None

    for attempt in range(max_retries):
        try:
            client = api_clients[current_api_key_index]
            response = await client.chat.completions.create(
                model=Config.MODEL,
                messages=messages,
                max_tokens=1500
            )

            if response.choices and len(response.choices) > 0:
                return response.choices[0].message.content or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"
            else:
                raise APIError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")

        except APIError as e:
            last_error = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ API (–∫–ª—é—á #{current_api_key_index + 1}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {last_error}")
            await rotate_api_key()
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    raise APIError(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    if not await check_subscription(message.from_user.id):
        channel_link = f"https://t.me/{Config.CHANNEL_ID[1:]}" if Config.CHANNEL_ID and Config.CHANNEL_ID.startswith(
            '@') else Config.CHANNEL_ID
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)
            .as_markup()
        )
        return

    await message.answer(
        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–±–æ—Ç–∞</b> (–º–æ–¥–µ–ª—å: {Config.MODEL})\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ API –∫–ª—é—á–µ–π: {len(api_clients)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == 'üí∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support(message: types.Message):
    await message.answer(
        f"‚ù§Ô∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:</b>\n{Config.DONATE_LINK}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ')
async def project_info(message: types.Message):
    await message.answer(
        Config.PROJECT_INFO,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == 'üì¢ –†–µ–∫–ª–∞–º–∞')
async def advertise(message: types.Message):
    await message.answer(
        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_cancel_keyboard()
    )


@dp.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_action(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def ask_question(message: types.Message):
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=get_cancel_keyboard()
    )


@dp.callback_query(F.data.startswith("copy_"))
async def copy_code_handler(callback: types.CallbackQuery):
    try:
        code_id = int(callback.data.split("_")[1])
        if code_id in code_storage:
            await callback.answer(
                "–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!\n\n"
                "–î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+V",
                show_alert=True
            )
        else:
            await callback.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")


@dp.message()
async def handle_message(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if message.text in ['üí∞ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'üì¢ –†–µ–∫–ª–∞–º–∞', 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'üö´ –û—Ç–º–µ–Ω–∞', '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ']:
        return

    if not await check_subscription(message.from_user.id):
        return

    try:
        msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        update_dialog_history(message.from_user.id, "user", message.text)
        dialog_history = list(user_dialogs.get(message.from_user.id, []))

        answer = await get_ai_response(dialog_history)
        formatted_answer = format_code(answer)

        update_dialog_history(message.from_user.id, "assistant", answer)

        reply_markup = None
        if answer and "```" in answer:
            try:
                code_blocks = [block.split('```')[1] for block in answer.split('```')[1::2] if
                               len(block.split('```')) > 1]
                clean_code = '\n\n'.join(code_blocks) if code_blocks else answer
                reply_markup = create_copy_button(clean_code)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞: {e}")

        await message.answer(
            formatted_answer,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

        await msg.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )


async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å {len(api_clients)} API –∫–ª—é—á–∞–º–∏")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")